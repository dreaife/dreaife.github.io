<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>dreaife的休憩小栈</title>
  
  <subtitle>过去和未来的记述者</subtitle>
  <link href="https://dreaife.icu/atom.xml" rel="self"/>
  
  <link href="https://dreaife.icu/"/>
  <updated>2022-10-12T07:54:53.355Z</updated>
  <id>https://dreaife.icu/</id>
  
  <author>
    <name>dreaife</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>test</title>
    <link href="https://dreaife.icu/article/d87f7e0c.html"/>
    <id>https://dreaife.icu/article/d87f7e0c.html</id>
    <published>2022-10-08T18:51:50.000Z</published>
    <updated>2022-10-12T07:54:53.355Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://dreaife-1306766477.cos.ap-nanjing.myqcloud.com/20221009032330.png" alt="20221009032330"></p><p>图片</p><h1>tp</h1><h2 id="fjkdfla">fjkdfla</h2><ol><li>fjdka;dl</li></ol><p>fjdkfjlksdajf;lska</p><ol start="2"><li>jfkdsafkjalfsda</li></ol><p>jfdafdsajflkdsa;</p><ol start="3"><li>fjkdlfklsdjalkfjsa</li></ol><blockquote><p>fjkdajfklda<br>fjkldsjfkas;</p><blockquote><p>fjkdsjfkldsak</p><p>fjdklflkasdjl</p><p>jdfjdlkaflka</p><p>fkdjaflsad;</p></blockquote></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;hello world!&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>picture</p><p><img src="https://dreaife-1306766477.cos.ap-nanjing.myqcloud.com/CHIWA_e105a.png" alt="CHIWA_e105a"></p><p>fdsfjsdlkaflkdsajf;<br>fjdsklafkdsalkf</p><p>jfdskflk;daklfsda</p><p>fjkdasfkl;dsaj;fa</p><p>fdklsfjkladjkl;fa<br>jfkdfklsda;<br>jfkdsfklsdaklfasd<br>kfdlskf;kasd</p><p>fjdskfjkladfklsa</p><ul><li>fjdkslfjklsad</li><li>j kfdlfads</li><li>fjdskf;sa</li></ul><p>fjdksflksdaf<br>jfkdfkl;ajk;afs</p>]]></content>
    
    
    <summary type="html">description</summary>
    
    
    
    <category term="uncategorized" scheme="https://dreaife.icu/categories/uncategorized/"/>
    
    
    <category term="untagged" scheme="https://dreaife.icu/tags/untagged/"/>
    
  </entry>
  
  <entry>
    <title>AcWingBasic02</title>
    <link href="https://dreaife.icu/article/b73b2cee.html"/>
    <id>https://dreaife.icu/article/b73b2cee.html</id>
    <published>2022-10-08T15:23:00.000Z</published>
    <updated>2022-10-12T07:54:53.351Z</updated>
    
    <content type="html"><![CDATA[<h1>二分</h1><h2 id="1-整数二分">1. 整数二分</h2><h3 id="1-1-算法原理">1.1 算法原理</h3><p>对于一个单调的队列，我们可以通过其单调的特性，对于要找到的数<code>k</code>可以通过以下方法找到：</p><blockquote><ol><li>先确定寻找的范围<code>l</code>和<code>r</code></li><li>当<code>l&lt;r</code>时，先取范围中点<code>mid</code>，将区间<code>[l,r]</code>分为<code>[l,mid]</code>和<code>[mid+1,r]</code>（此时<code>mid=l+r&gt;&gt;1</code>）或<code>[l,mid-1]</code>和<code>[mid,r]</code>（此时<code>mid=l+r+1&gt;&gt;1</code>）</li><li>然后，在<code>l&lt;r</code>条件下，根据<code>check(mid)</code>函数，对<code>l</code>，r进行更新，直到<code>l&gt;=r</code></li></ol></blockquote><h3 id="1-2-代码实现">1.2 代码实现</h3><p><em><strong>本代码思路参考自y总</strong></em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//将区间[l,r]分为[l,mid]和[mid+1,r]</span><br><span class="line">int bsearch_1(int l,int r)&#123;</span><br><span class="line">while(l&lt;r)&#123;</span><br><span class="line">int mid = l+r&gt;&gt;1;</span><br><span class="line">if(check(mid)) r=mid;</span><br><span class="line">else l=mid+1;</span><br><span class="line">&#125;return l;</span><br><span class="line">&#125;</span><br><span class="line">//将区间[l,r]分为[l,mid-1]和[mid,r]</span><br><span class="line">int bsearch_2(int l,int r)&#123;</span><br><span class="line">while(l&lt;r)&#123;</span><br><span class="line">int mid = l+r+1&gt;&gt;1;</span><br><span class="line">if(check(mid)) l=mid;</span><br><span class="line">else r=mid-1</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-相关题目">1.3 相关题目</h3><ul><li><a href="https://www.acwing.com/problem/content/791/">AcWing 789. 数的范围</a></li></ul><h2 id="2-浮点数二分">2. 浮点数二分</h2><h3 id="2-1-算法原理">2.1 算法原理</h3><p>对于一个单调的队列，我们可以通过其单调的特性，与整数二分相似，对于要找到的数<code>k</code>可以通过以下方法找到：</p><blockquote><ol><li>先确定寻找的范围<code>l</code>和<code>r</code></li><li>当<code>r-l&gt;eps</code>时，先取范围中点<code>mid</code>，<code>mid=(l+r)/2</code></li><li>然后，在<code>r-l&gt;eps</code>条件下，根据<code>check(mid)</code>函数，对<code>l</code>，<code>r</code>进行更新，直到<code>r-l&lt;=eps</code></li></ol></blockquote><h3 id="2-2-代码实现">2.2 代码实现</h3><p><em><strong>本代码思路参考自y总</strong></em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">double bsearch(double l,double r)&#123;</span><br><span class="line">while(r-l&gt;eps)&#123;</span><br><span class="line">double mid = (l+r)/2;</span><br><span class="line">if(check(mid)) r=mid;</span><br><span class="line">else l=mid;</span><br><span class="line">&#125;return l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-相关题目">2.3 相关题目</h3><ul><li><a href="https://www.acwing.com/problem/content/792/">AcWing 790. 数的三次方根</a></li></ul><p><img src="https://raw.githubusercontent.com/dreaife/PictureOfDreaife/main/picture/202112081934120.png?token=ARNBM5F2UAC2KPANFLKILQLBWCMI2" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;二分&lt;/h1&gt;
&lt;h2 id=&quot;1-整数二分&quot;&gt;1. 整数二分&lt;/h2&gt;
&lt;h3 id=&quot;1-1-算法原理&quot;&gt;1.1 算法原理&lt;/h3&gt;
&lt;p&gt;对于一个单调的队列，我们可以通过其单调的特性，对于要找到的数&lt;code&gt;k&lt;/code&gt;可以通过以下方法找到：&lt;/p&gt;
&lt;blo</summary>
      
    
    
    
    <category term="AcWingBasic" scheme="https://dreaife.icu/categories/AcWingBasic/"/>
    
    
    <category term="AcWing" scheme="https://dreaife.icu/tags/AcWing/"/>
    
    <category term="algorithm" scheme="https://dreaife.icu/tags/algorithm/"/>
    
    <category term="binary_search" scheme="https://dreaife.icu/tags/binary-search/"/>
    
  </entry>
  
  <entry>
    <title>AcWingBasic01</title>
    <link href="https://dreaife.icu/article/2e327d54.html"/>
    <id>https://dreaife.icu/article/2e327d54.html</id>
    <published>2022-10-08T14:26:00.000Z</published>
    <updated>2022-10-12T07:54:53.348Z</updated>
    
    <content type="html"><![CDATA[<h1>排序</h1><h2 id="1-快速排序">1. 快速排序</h2><ol><li><p>原理</p><p>对于一段无序的数列，若要将其排序，可以以此步骤进行：</p><ul><li>对于一段的数列，可以先任取一点<code>mid</code>作为判断点。(其中<code>mid</code>一般为数列中点)</li><li>对于这段数列进行一次遍历，将大于<code>mid</code>的数放于右端，小于<code>mid</code>的数放于左端。</li><li>然后对于分配过的序列，选取其<code>[l,p]</code>,<code>[p+1,r]</code>两个子段继续上述操作，直到长度为<code>1</code>。(其中<code>p</code>为上述左右两端的分界点)</li></ul></li><li><p>具体实现(代码)</p><p><em><strong>本代码思路参考自y总</strong></em></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">quick_sort</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&gt;=r) <span class="keyword">return</span>;<span class="comment">//设置退出条件</span></span><br><span class="line"><span class="type">int</span> i=l<span class="number">-1</span>,j+<span class="number">1</span>,mid = a[l+r&gt;&gt;<span class="number">1</span>];<span class="comment">//设置判断点</span></span><br><span class="line"><span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line"><span class="keyword">do</span> i++;<span class="keyword">while</span>(a[i]&lt;mid);</span><br><span class="line"><span class="keyword">do</span> j--;<span class="keyword">while</span>(a[j]&gt;mid);</span><br><span class="line"><span class="keyword">if</span>(i&lt;j) <span class="built_in">swap</span>(a[i],a[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">quick_sort</span>(a,l,j);<span class="comment">//继续对子段排序</span></span><br><span class="line"><span class="built_in">quick_sort</span>(a,j+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo>∗</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N*logN)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span></li></ul></li></ol><p>3.相关题目</p><ul><li><a href="https://www.acwing.com/problem/content/787/">AcWing 785. 快速排序</a></li><li><a href="https://www.acwing.com/problem/content/788/">AcWing 786. 第k个数</a></li></ul><h2 id="2-归并排序">2. 归并排序</h2><ol><li><p>原理</p><p>对于一段无序的数列，与快速排序相似，若要将其排序，可以以此步骤进行：</p><ul><li>对于一段的数列，可以先任取一点<code>mid</code>作为分割点。(其中<code>mid</code>一般为数列中点)</li><li>先选取其<code>[l,mid]</code>,<code>[mid+1,r]</code>两个子段继续排序，并假定其已经排序完成。</li><li>然后对于已经排序过的两段子段，按照排序顺序先放入<code>b</code>数组中，然后再将排序过的数列覆盖原数列。</li></ul></li><li><p>具体实现(代码)</p><p><em><strong>本代码思路参考自y总</strong></em></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge_sort</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> b[],<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&gt;=r) <span class="keyword">return</span>;<span class="comment">//设置退出条件</span></span><br><span class="line"><span class="type">int</span> mid = l+r&gt;&gt;<span class="number">1</span>,i=l,j=mid+<span class="number">1</span>,k=<span class="number">0</span>;<span class="comment">//设置分割点</span></span><br><span class="line">    <span class="built_in">merge_sort</span>(a,b,l,mid);<span class="built_in">merge_sort</span>(a,b,mid+<span class="number">1</span>,r);<span class="comment">//先对子段排序</span></span><br><span class="line"><span class="keyword">while</span>(i&lt;=mid&amp;&amp;j&lt;=r)</span><br><span class="line">        <span class="keyword">if</span>(a[i]&lt;=a[j]) b[k++] = a[i++];</span><br><span class="line">    <span class="keyword">else</span> b[k++] = a[j++];</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=mid) b[k++]=a[i++];</span><br><span class="line">    <span class="keyword">while</span>(j&lt;=r) b[k++]=a[j++];</span><br><span class="line">    <span class="keyword">for</span>(i=l,j=<span class="number">0</span>;i&lt;=r;i++,j++) a[i]=b[j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>时间复杂度：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo>∗</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N*logN)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span></li></ul></li><li><p>相关应用</p><ul><li>求逆序对</li></ul><p>当用归并排序对数组进行排序时，可以发现，当出现<code>a[i]&gt;b[j]</code>时，即出现了逆序对，且对于当前<code>a[j]</code>来说，会出现<code>mid-i+1</code>个逆序对(即<code>a[j]</code>与<code>[i,mid]</code>共<code>mid-i+1</code>个数配对组合成逆序对)。由此我们可以在排序时求出对应数列中存在的逆序对。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">merge_sort</span><span class="params">(<span class="type">int</span> a[],<span class="type">int</span> b[],<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;=r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> mid = l+r&gt;&gt;<span class="number">1</span>,i=l,j=mid+<span class="number">1</span>,k=<span class="number">0</span>;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> ans = <span class="built_in">merge_sort</span>(a,b,l,mid)+<span class="built_in">merge_sort</span>(a,b,mid+<span class="number">1</span>,r);</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=mid&amp;&amp;j&lt;=r)</span><br><span class="line">        <span class="keyword">if</span>(a[i]&lt;=a[j]) b[k++] = a[i++];</span><br><span class="line">        <span class="keyword">else</span> ans += mid-i+<span class="number">1</span>,b[k++]=a[j++];</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=mid) b[k++] = a[i++];</span><br><span class="line">    <span class="keyword">while</span>(j&lt;=r) b[k++] = a[j++];</span><br><span class="line">    <span class="keyword">for</span>(i=l,j=<span class="number">0</span>;i&lt;=r;i++,j++) a[i]=b[j];</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>相关题目</p></li></ol><ul><li><a href="https://www.acwing.com/problem/content/789/">AcWing 787. 归并排序</a></li><li><a href="https://www.acwing.com/problem/content/790/">AcWing 788. 逆序对的数量</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;排序&lt;/h1&gt;
&lt;h2 id=&quot;1-快速排序&quot;&gt;1. 快速排序&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;原理&lt;/p&gt;
&lt;p&gt;对于一段无序的数列，若要将其排序，可以以此步骤进行：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于一段的数列，可以先任取一点&lt;code&gt;mid&lt;/code&gt;作为判断点</summary>
      
    
    
    
    <category term="AcWingBasic" scheme="https://dreaife.icu/categories/AcWingBasic/"/>
    
    
    <category term="AcWing" scheme="https://dreaife.icu/tags/AcWing/"/>
    
    <category term="algorithm" scheme="https://dreaife.icu/tags/algorithm/"/>
    
    <category term="sort" scheme="https://dreaife.icu/tags/sort/"/>
    
  </entry>
  
  <entry>
    <title>Linux_xju_report01</title>
    <link href="https://dreaife.icu/article/1eb33aa5.html"/>
    <id>https://dreaife.icu/article/1eb33aa5.html</id>
    <published>2022-10-08T14:22:00.000Z</published>
    <updated>2022-10-12T07:54:53.353Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、实验要求">一、实验要求</h2><ol><li>添加David与Peter两个用户，并设置家目录自动创建，修改密码。查看创建完成后的用户与用户组配置文件（/etc/passwd、/etc/shadow）</li><li>建立目录“/project”, 该目录里的文件只能有David 和 Peter 两人读取、增加、删除、修改及执行，其他用户不能对该目录进行任何的访问操作，在目录下写入project.txt文件，该文件可以由David查看，修改以及执行，但Peter只能查看，无其他权限。</li><li>在project.txt文件中写入一行内容，并且使用grep命令进行查找。</li><li>要求：以截图+文字说明的方式提交word或者pdf文档，文字用来解释改行命令做了什么操作，命名方式：学号+姓名</li></ol><h2 id="二、实验步骤">二、实验步骤</h2><ol><li>添加用户，查看用户及配置文件</li></ol><ul><li>添加avid</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">useradd avid -p 12345678# 创建用户avid并设置密码为12345678</span><br><span class="line">cat /etc/passwd | grep avid# 查看用户配置文件，且该用户名中含avid</span><br><span class="line">cat /etc/shadow | grep avid# 查看用户密码配置文件，且该用户名中含avid</span><br><span class="line">cat /etc/group | grep avid# 查看用户组配置文件，且该用户组名中含avid</span><br></pre></td></tr></table></figure><p><img src="https://dreaife-1306766477.cos.ap-nanjing.myqcloud.com/image-20220923035226200.png" alt="image-20220923035226200"></p><center>图1 avid用户查看结果</center><ul><li>添加Peter</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">useradd Peter -p asdfghjk# 创建用户Peter并设置密码为asdfghjk</span><br><span class="line">cat /etc/passwd | grep Peter# 查看用户配置文件，且该用户名中含Peter</span><br><span class="line">cat /etc/shadow | grep Peter# 查看用户密码配置文件，且该用户名中含Peter</span><br><span class="line">cat /etc/group | grep Peter# 查看用户组配置文件，且该用户组名中含Peter</span><br></pre></td></tr></table></figure><p><img src="https://dreaife-1306766477.cos.ap-nanjing.myqcloud.com/image-20220923035923857.png" alt="image-20220923035923857"></p><center>图2 Peter用户查看结果</center><ol start="2"><li>修改文件夹、文件权限</li></ol><ul><li>创建文件夹并修改权限</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo groupadd linuxTestA# 创建用户组，在其中加入avid和Peter</span><br><span class="line">sudo usermod -a -G linuxTestA avid</span><br><span class="line">sudo usermod -a -G linuxTestA Peter</span><br><span class="line">id avid;id Peter;# 查看用户所属组别</span><br><span class="line">sudo mkdir /project# 创建/project</span><br><span class="line">sudo chgrp linuxTestA /project# 改变文件夹所属组</span><br><span class="line">sudo chmod 770 /project# 修改文件夹权限</span><br><span class="line">ls -l / | grep project# 查看修改情况</span><br></pre></td></tr></table></figure><p><img src="https://dreaife-1306766477.cos.ap-nanjing.myqcloud.com/image-20220923045308786.png" alt="image-20220923045308786"></p><p><img src="https://dreaife-1306766477.cos.ap-nanjing.myqcloud.com/image-20220923045333572.png" alt="image-20220923045333572"></p><center>图3 创建文件夹并修改权限</center><ul><li>创建文件并修改权限</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo touch /project/project.txt# 创建/project/project.txt</span><br><span class="line">sudo chown avid /project/project.txt# 改变文件所有者</span><br><span class="line">sudo chgrp linuxTestA /project/project.txt# 改变文件所属组</span><br><span class="line">sudo chmod 740 /project/project.txt# 修改文件权限</span><br><span class="line">sudo ls -l /project# 查看修改情况</span><br></pre></td></tr></table></figure><p><img src="https://dreaife-1306766477.cos.ap-nanjing.myqcloud.com/image-20220923050657843.png" alt="image-20220923050657843"></p><center>图4 创建文件并修改权限</center><ol start="3"><li>在project.txt文件中写入一行内容，并且使用grep命令进行查找。</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /project/project.txt# 写入内容</span><br><span class="line">sudo grep hello /project/project.txt# 通过grep进行查找</span><br></pre></td></tr></table></figure><p><img src="https://dreaife-1306766477.cos.ap-nanjing.myqcloud.com/image-20220923051037865.png" alt="image-20220923051037865"></p><center>图5 写入文件并限定查找</center>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、实验要求&quot;&gt;一、实验要求&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;添加David与Peter两个用户，并设置家目录自动创建，修改密码。查看创建完成后的用户与用户组配置文件（/etc/passwd、/etc/shadow）&lt;/li&gt;
&lt;li&gt;建立目录“/project”, </summary>
      
    
    
    
    <category term="xju_Linux" scheme="https://dreaife.icu/categories/xju-Linux/"/>
    
    
    <category term="Linux" scheme="https://dreaife.icu/tags/Linux/"/>
    
    <category term="xju" scheme="https://dreaife.icu/tags/xju/"/>
    
    <category term="report" scheme="https://dreaife.icu/tags/report/"/>
    
  </entry>
  
</feed>
